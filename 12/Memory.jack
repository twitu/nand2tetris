// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {

    static Array RAM, freelist;

    /** Initializes the class. */
    function void init() {
        let RAM = 0; // allows random access to any memory value
        let freelist = 2048; // heap base address
        let freelist[0] = null; // next pointer
        let freelist[1] = 14334; // total heap space, 14K - 2
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return RAM[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let RAM[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array node, temp;
        let node = freelist;

        while (node[1] < size & node > 0) { // check that node does not point to null
            let node = node[0];
        }

        if (node = 0) { // check if node is equal to null
            do Memory.deFrag();
            let node = freelist;
            while (node[1] < size & node > 0) { // check that node does not point to null
                let node = node[0];
            }
            if (node = 0) {
                do Sys.error();
            }
        }

        let node[1] = node[1] - size - 2; // extra space to store length and pointer
        do Memory.poke(node + node[1] + 3, size); // set size of used block
        return node + node[1] + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array node;
        let node = freelist;

        while (node[0] < o) {
            let node = node[0];
        }

        let o[-2] = node[0];
        let node[0] = o[-2];
        return;
    }

    // coalesce consecutive free memory blocks
    function void deFrag() {
        var Array node, temp;
        let node = freelist;

        while (node + node[1] + 2 = node[0]) {
            let temp = node[0];
            let node[0] = temp[0];
            let node[1] = temp[1] + 2;
        }

        return;
    }
}
