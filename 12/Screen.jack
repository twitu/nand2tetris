// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {

    static int screenStart, rows, columns, color, screenEnd;
    static Array powers_of_two, Screen;

    /** Initializes the Screen. */
    function void init() {
        let screenStart = 16384;
        let screenEnd = 24576; // not a valid address
        let screen = 16384;
        let rows = 512;
        let cols = 256;
        let color = true;
        let powers_of_two = Math.pow_array();
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int count;
        let count = screenStart;
        while (count < screenEnd) {
            let screen[count] = 0;
            let count = count + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
        let address = screenStart + Math.multiply(y, 32) + Math.divide(x, 16);
        let screen[address] = screen[address] | powers_of_two[x & 15];
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int delta_x, delta_y, cond, a, b;

        let delta_x = x2 - x1;
        let delta_y = y2 - y1;
        let a = 0;
        let b = 0;
        let cond = 0;
        // TODO

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        do Screen.drawLine(x1, y1, x2, y1);
        do Screen.drawLine(x2, y1, x2, y2);
        do Screen.drawLine(x2, y2, x1, y2);
        do Screen.drawLine(x1, y2, x1, y1);
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int itr, cond, radius_sqr, x_limit;

        let itr = r;
        let cond = -r - 1;
        let radius_sqr = Math.multiply(r, r);
        while (itr > cond) {
            let x_limit = Math.sqrt(sqr - Math.multiply(itr, itr));
            do Screen.drawLine(x - x_limit, y + itr, x + x_limit, y + itr);
        }

        return;
    }
}
