// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    static Array powers;

    /** Initializes the library. */
    function void init() {
        var count = 0;
        var value = 1;
        powers = Array.alloc(16);

        while (count < 16) {
            let powers[count] = value;
            let value = value + value;
        }
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {

    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int product;
        var int shiftedx;
        var int count;

        let product = 0;
        let shiftedx = x;

        while (count <  16) {
            if ((y & powers[count]) = powers[count]) {
                product += shiftedx;
            }

            let shiftedx = shiftedx + shiftedx;
            let count += 1;
        }

        return product;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, temp;
        
        if (y > x) {
            return 0;
        }

        let q =  Math.divide(x, y+y);
        let temp = q + q;
        if ((x - Math.multiply(temp, y)) < y) {
            return temp;
        } else {
            return temp + 1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int low, high, med;

        let low = 0;
        let high = 256;

        while (low < high) {
            med = Math.divide(low + high, 2);
            if (Math.multiply(med, med) < x) {
                high = med - 1;
            } else {
                low = med + 1;
            }
        }

        return low;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        } else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        } else {
            return a;
        }
    }
}
